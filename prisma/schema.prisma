// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id               BigInt             @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String             @unique
  mobile           String
  password         String
  otp              String
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now())
  customers        customers[]
  invoices         invoices[] // Add this line to specify the opposite relation
  // Add other relationships here
  invoice_products invoice_products[]
  products         products[]
  categories       categories[]
}

model customers {
  id         BigInt     @id @default(autoincrement())
  name       String
  email      String
  mobile     String
  user_id    BigInt     @unique
  user       users      @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  invoices   invoices[] // Add this line to specify the opposite relation
}

model invoice_products {
  id         BigInt   @id @default(autoincrement())
  invoice_id BigInt
  product_id BigInt
  user_id    BigInt
  qty        String
  sale_price String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  invoice    invoices @relation(fields: [invoice_id], references: [id]) // Specify the opposite relation
  product    products @relation(fields: [product_id], references: [id]) // Specify the opposite relation
  user       users    @relation(fields: [user_id], references: [id]) // Specify the opposite relation
}

model products {
  id               BigInt             @id @default(autoincrement())
  user_id          BigInt
  category_id      BigInt
  name             String
  price            BigInt
  unit             String
  img_url          String
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now())
  user             users              @relation(fields: [user_id], references: [id]) // Specify the opposite relation
  category         categories         @relation(fields: [category_id], references: [id]) // Specify the opposite relation
  invoice_products invoice_products[]
}

model categories {
  id         BigInt     @id @default(autoincrement())
  name       String
  user_id    BigInt
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  user       users      @relation(fields: [user_id], references: [id]) // Specify the opposite relation
  products   products[]
}

model invoices {
  id               BigInt             @id @default(autoincrement())
  total            String
  discount         String
  vat              String
  payable          String
  user_id          BigInt
  customer_id      BigInt
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now())
  user             users              @relation(fields: [user_id], references: [id]) // Specify the opposite relation
  customer         customers          @relation(fields: [customer_id], references: [id]) // Specify the opposite relation
  invoice_products invoice_products[]
}
